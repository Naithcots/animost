generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String          @id @default(uuid())
  googleId  String?         @unique
  email     String          @unique
  username  String
  password  String?
  avatarUrl String?
  type      UserAccountType

  Library     Library[]
  AnimeStream AnimeStream[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LibraryAnime {
  jikanMediaId String @id

  title  String
  image  String
  status AnimeStatus
  type   AnimeType

  Library Library[]
  Genres  Genre[]
}

model Library {
  id           String       @id @default(uuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  mediaId      String
  LibraryAnime LibraryAnime @relation(fields: [mediaId], references: [jikanMediaId], onDelete: Cascade)

  type     MediaType
  episodes Int?      @default(0)
  chapters Int?      @default(0)
  volumes  Int?      @default(0)

  score  Int?
  status LibraryStatus @default(PLANNING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, mediaId], name: "user_media")
}

model AnimeStream {
  id           String       @id @default(uuid())
  jikanMediaId String
  url          String       @db.Text
  status       StreamStatus @default(ALIVE)
  episode      Int

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  mal_id String @id
  name   String
  type   String
  url    String

  Media LibraryAnime[]
}

enum UserAccountType {
  GOOGLE_OAUTH
  CREDENTIALS
}

enum MediaType {
  ANIME
  MANGA
}

enum LibraryStatus {
  COMPLETED
  WATCHING
  PLANNING
  PAUSED
  DROPPED
}

enum StreamStatus {
  ALIVE
  DEAD
}

enum AnimeStatus {
  FINISHED
  AIRING
  PLANNED
}

enum AnimeType {
  TV
  OVA
  MOVIE
  SPECIAL
  ONA
  MUSIC
}
